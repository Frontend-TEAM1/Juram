

> 강사님 Notion 주소
    https://lyrical-brain-e0f.notion.site/6-0dca9be80d294cb2a2c8a70720991a2b

> OPEN API 주소
    https://docs.github.com/en/rest/issues/issues?apiVersion=2022-11-28#list-user-account-issues-assigned-to-the-authenticated-user

> 목표
    - 본인이 잘 모르는 오픈 api라 할 지라도 사용할 수 있는가?
    - 페이지네이션 기능을 구현할 수 있는가?
    - 필터 기능 구현을 효율적으로 할 수 있는가?
    - 리엑트로 반응형 웹 사이트를 만들 수 있는가?
    - rtk 사용법을 익히고 있는가?

> git commit message
    - feat : 새로운 기능 추가
    - fix : 버그 수정
    - docs : 문서 수정
    - style : 코드 formatting, 세미콜론(;) 누락, 코드 변경이 없는 경우
    - refactor : 코드 리팩터링
    - test : 테스트 코드, 리팩터링 테스트 코드 추가(프로덕션 코드 변경 X)
    - chore : 빌드 업무 수정, 패키지 매니저 수정(프로덕션 코드 변경 X)
    - design : CSS 등 사용자 UI 디자인 변경
    - comment : 필요한 주석 추가 및 변경
    - rename : 파일 혹은 폴더명을 수정하거나 옮기는 작업만인 경우
    - remove : 파일을 삭제하는 작업만 수행한 경우
    - !BREAKING CHANGE : 커다란 API 변경의 경우
    - !HOTFIX : 급하게 치명적인 버그를 고쳐야 하는 경우

=====================================================================================================================================

< 요구 사항 >

    가. 목록페이지

        - 이슈 데이터를 가져와야하는 레퍼지토리는 https://github.com/angular/angular-cli 를 활용 할 것
        - 이슈 목록은 10개 단위의 페이지네이션으로 구현할 것,
            ㄴ 총 이슈의 갯수는 최근 200개로 한정 ( total item: 200 )
                - api에서 구할 수 없는 데이터이므로 임의로 정할 것
                - 만약 총 이슈의 갯수가 200개가 안된다고 하더라도 빈 페이지가 보이도록 구현
                
            - 현재 페이지의 숫자는 포커스 되어있어야 할것 < 1, 2, 3, [4], 5, 6 , 7, 8, 9 , 10 >
            - 10페이지 단위로 마지막 페이지에서 다음 페이지를 누르면 다음 10 페이지가 뜨도록 구현할 것
                ㄴ < 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 > [다음버튼]
                ㄴ < 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 >
                
            - 버튼은 [맨처음] [이전] 1, [2], 3, 4, 5 [다음] [맨끝]으로 구현할 것

        - 필터 기능 구현 (생성순/업데이트순/댓글순, 10개/20개/50개 씩 보기)
        - 필터 기능 및 페이지네이션 구현 시 뒤로가기 기능을 지원해야한다
            
            ex) 2페이지 → 3페이지 (뒤로이동) → 2페이지
                생성순 → 업데이트순 (뒤로이동) → 생성순
            
        - 목록은 RTK를 활용하여 전역 상태 관리 할 것
        - 모바일 및 태블릿 화면으로 봐도 UX에 불편함이 없어야 함
        - 데이터가 받아오는 동안 리스트 화면은 로딩 페이지를 띄워야함

    나. 상세페이지

        - 이슈의 id 값을 활용하여 api를 요청하고 해당 issue의 상세페이지를 구현할 것
        - 모바일 및 태블릿 화면으로 봐도 UX에 불편함이 없어야 함

    다. 공통

        - 각 기능 마다 브랜치를 파서 merge 할 것
        - README.md에 아래와 같은 사항을 추가할 것
            ㄴ 프로젝트 설명
            ㄴ 배포 주소 or 시연 영상
            ㄴ 프로젝트 폴더 구조
            ㄴ 팀원
            ㄴ 사용 기술 스택
            ㄴ 요구 사항 구현 내역
            ㄴ 코드 및 깃허브 커밋 컨벤션

=====================================================================================================================================


< 생각 정리 >
    1. open api로 어떤 정보가 있고 어떤 페이지들이 필요한지 파악
    2. 목록페이지, 상세페이지 구조 짜기 (퍼블리싱 / 반응형까지 고려해서)
    3. 데이터부터 우선 채우기
    4. 디테일 챙기기(페이지네이션, 버튼, 필터 기능)

    
=====================================================================================================================================


< 궁금한 점 >
    1. Octokit.js를 꼭 써야하나? -> github에서 유지보수 하는 SDK라서 github의 open API를 쓸 때 권장된다.
       axios 대신 쓰는 거인듯..
    2. 
    
    
=====================================================================================================================================


< 막막할 때 >
    1. 파일 구조.. 뭐부터 시작해야할까?
       우선 지금의 이주람은 기존 프로젝트 파일 구조 보고 필요할 거 같은 폴더나 파일 만드는 중
       pages(main, detail), store(store, rootReducer, reducer), utils

    2. 그 다음에는 App.js를 채워야지. routing하고 빈 컴포넌트로 화면 구성 짜기


=====================================================================================================================================


< 사소한 필기 >
    1. pages 구조는 페이지 단위로 하고, index파일에 그 페이지에 해당하는 컴포넌트들 구성하기