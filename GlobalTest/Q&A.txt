

1. FLUX 패턴에 대하여 설명해보세요
    단방향의 데이터 통신(전달?).
    action이라는 데이터를 dispatcher로만 전달하는 방식으로 에러 발생 시 디버깅 해야하는 부분 판별이 수월해진다.

2. 아래의 hook 함수는 각각 어느 순간에 사용할까요
    (1) useReducer
        함수 로직을 컴포넌트로부터 분리시켜 따로 관리하는 것으로 다른곳에서도 같은 함수가 쓰인다면 분리하는 느낌

    (2) useContext
        전역 상태 관리. 전역에서 접근 가능할 데이터 등이 있을 때 사용한다.

3. 전역 상태 관리를 해야하는 이유는 무엇일까요
    데이터가 쓰이는 곳 마다 상위에서 하위로 전달하는 방식으로 하면 데이터 흐름 파악이 어려워지고
    하위 컴포넌트가 늘어갈 수록 depth가 깊어지기 때문에 데이터 접근이 힘들어지기 때문에
    이를 방지하고자 전역 상태 관리로 어디서든 접근할 수 있도록 하는 것이다.

4. 그렇다면 전역 상태 관리는 위 조건에만 부합하면 반드시 수행하는 것이 좋을까요?
   전역 상태 관리를 통해 얻을 수 있는 장단점에 관하여 토의해보세요
    구조가 단순하고 코드량이 많지 않은 프로젝트일 경우 전역 상태관리하는 것이 더 복잡해질 수 있다.
    따라서 구조가 복잡하거나 규모가 큰 프로젝트일 경우에 기초부터 잘 다지는 것이 중요한 것 같다.
    전역 상태의 장점은 데이터에 대한 접근을 무조건 상위로부터 받은 데이터에만 하는것이 아니기 때문에
    데이터 흐름이나 구조 파악에 용이하고, 수정이 필요할 경우 한 군데에서만 수정하고 부분 수정만 하면된다.
    하지만 단점으로는 원본 데이터가 아닌, 각 함수 혹은 컴포넌트 실행시 깊은 복사로 새롭게 생성한 데이터가 생길 때에는
    결국 상위에서 하위로 전달하는 구조가 되어 빈도수가 적지않게 원본 데이터에 접근하지 않는 경우가 많을 것 같다..
    강사님 말씀대로 로그인 정보나 개인 정보 등 어디서나 값 변경없이 동일하게 쓰이는 정보만 전역으로 관리해야할 것 같다.  